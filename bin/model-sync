#!/usr/bin/env ruby

# frozen_string_literal: true

$stdout.sync = true

require_relative '../config/boot'
require_relative '../config/environment'

def sanitize_pg_message(message)
  message.sub(/\R+\s*/, '. ').gsub(/\R+\s*/, ' ').gsub(/\s*$/, '')
end

TAG = 'model-sync'
RETRY_TIMEOUT = 5

Signal.trap('INT') { raise Interrupt }
Signal.trap('TERM') { raise Interrupt }

return_value = 1

Rails.application.eager_load!

logger = Rails.logger.tap do |l|
  l.push_tags(TAG)
  l.extend(Pompa::MultiLogger)
end

begin
  Pompa::ModelSync.process
rescue Interrupt
  logger.info('Caught interrupt. Exiting...')
  return_value = 0
rescue PG::ConnectionBad => e
  logger.error{"Error #{e.class}: #{sanitize_pg_message(e.message)}"}
  logger.multi_logger.backtrace(e)
  logger.error{"Retrying..."}
  sleep RETRY_TIMEOUT
  retry
rescue PG::Error => e
  logger.error{"Error #{e.class}: #{sanitize_pg_message(e.message)}"}
  logger.multi_logger.backtrace(e)
  logger.error{"Exiting..."}
rescue StandardError => e
  logger.error{"Error #{e.class}: #{e.message}."}
  logger.multi_logger.backtrace(e)
  logger.error{"Exiting..."}
end

exit return_value
